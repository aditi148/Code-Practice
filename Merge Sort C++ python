//Merge sort C++

void merge(int A[], int start, int mid, int end)
{
	int p=start, q=mid+1;
	int Arr[end-start+1], k=0;
	
	for(int i=start; i<=end; i++)
	{
		if(p > mid)	
			Arr[k++] = A[q++];
		else  if (q> end)
			Arr[k++] = A[p++];
		else if(A[p] < A[q])
			Arr[k++] = A[p++];
		else
			Arr[k++] = A[q++];
	}
	for (int p=0; p<k; p++)
	{
		A[start++] = Arr[p];
	}
}

void merge_sort(int A[], int start, int end)
{
	if(start < end)
	{
		int mid= (start+end)/2;
		merge_sort(A, start, mid);
		merge_sort(A, mid+1, end);
		
		merge(A, start, mid, end);
	}
}

//Merge sort python

def merge_sort:
	if len(sort_list) > 1:
		mid= len(sort_list) / 2
		lefthalf= sort_list[:mid]
		righthalf= sort_list[mid:]
		merge_sort(lefthalf)
	merge_sort(righthalf)
i=0
j=0	
k=0
	while i<len(lefthalf) and j< len(righthalf):
			if lefthalf[i] < righthalf[j]:
				sort_list[k] = lefthalf [i]
				i=i+1
		else:
				sort_list[k] = righthalft[j]
				j=j+1
		k=k+1	
		while i<len(lefthalf):
			sort_list[k]= lefthalf[i]
			i=i+1
			k=k+1
		While j<len(righthalf):
			sort_list[k]= righthalf[j]
			j=j+1
			k=k+1
	sort_list= [2, ,6, 7,9, 0, 3]
	merge_sort(sort_list)
